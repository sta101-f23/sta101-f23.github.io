{
  "hash": "8c5522194de581dc627a1b472c845f60",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Donors and yawners\"\ncategories: \n  - Application exercise\n  - Suggested answers\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\nIn this application exercise, we'll introduce pipelines for conducting hypothesis tests with randomization.\n\n# Goals\n\n-   Conduct a hypothesis test for a proportion\n\n-   Conduct a hypothesis test for a difference in proportions\n\n# Packages and data\n\nWe'll use the **tidyverse** and **tidymodels** packages as usual and the **openintro** package for the datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(openintro)\n```\n:::\n\n\n# Case study 1: Donors\n\nThe first dataset we'll use is `organ_donors`, which is in your `data` folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norgan_donor <- read_csv(\"data/organ-donor.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 62 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): outcome\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nThe hypotheses we are testing are:\n\n$H_0: p = 0.10$\n\n$H_A: p \\ne 0.10$\n\nwhere $p$ is the true complication rate for this consultant.\n\n## Exercise 1\n\nConstruct the null distribution with 100 resamples. Name it `null_dist_donor`. How many rows does `null_dist_donor` have? How many columns? What does each row and each column represent?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(25)\n\nnull_dist_donor <- organ_donor |>\n  specify(response = outcome, success = \"complication\") |>\n  hypothesize(null = \"point\", p = 0.10) |> \n  generate(reps = 100, type = \"draw\") |> \n  calculate(stat = \"prop\")\n\nnull_dist_donor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: outcome (factor)\nNull Hypothesis: point\n# A tibble: 100 × 2\n   replicate   stat\n   <fct>      <dbl>\n 1 1         0.0645\n 2 2         0.0484\n 3 3         0.113 \n 4 4         0.0806\n 5 5         0.145 \n 6 6         0.145 \n 7 7         0.113 \n 8 8         0.0806\n 9 9         0.113 \n10 10        0.145 \n# ℹ 90 more rows\n```\n\n\n:::\n:::\n\n\n> `null_dist_donor` has 100 rows and 2 columns. Each row is a replicate, and `replicate` column indicates the replicate number and `stat` is the simulated proportion, $\\hat{p}$.\n\n## Exercise 2\n\nWhere do you expect the center of the null distribution to be? Visualize it to confirm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# option 1\nggplot(null_dist_donor, aes(x = stat)) +\n  geom_histogram(bins = 15, color = \"white\")\n```\n\n::: {.cell-output-display}\n![](ae-10-donor-yawner-sa_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# option 2\nvisualize(null_dist_donor)\n```\n\n::: {.cell-output-display}\n![](ae-10-donor-yawner-sa_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n## Exercise 2\n\nCalculate the observed complication rate of this consultant. Name it `obs_stat_donor`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobs_stat_donor <- organ_donor |>\n  specify(response = outcome, success = \"complication\") |>\n  calculate(stat = \"prop\")\n\nobs_stat_donor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: outcome (factor)\n# A tibble: 1 × 1\n    stat\n   <dbl>\n1 0.0484\n```\n\n\n:::\n:::\n\n\n## Exercise 3\n\nOverlay the observed statistic on the null distribution and comment on whether an observed outcome as extreme as the observed statistic, or lower, is a likely or unlikely outcome, if in fact the null hypothesis is true.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# option 1\nggplot(null_dist_donor, aes(x = stat)) +\n  geom_histogram(bins = 15, color = \"white\") +\n  geom_vline(xintercept = obs_stat_donor |> pull(stat), color = \"red\", linewidth = 2)\n```\n\n::: {.cell-output-display}\n![](ae-10-donor-yawner-sa_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# option 2\nvisualize(null_dist_donor) +\n  shade_p_value(obs_stat = obs_stat_donor, direction = \"two-sided\")\n```\n\n::: {.cell-output-display}\n![](ae-10-donor-yawner-sa_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n## Exercise 4\n\nCalculate the p-value and comment on whether it provides convincing evidence that this consultant incurs a lower complication rate than 10% (overall US complication rate).\n\n> Since the p-value is greater than the discernability level, we fail to reject the null hypothesis. These data do not provide convincing evidence that this consultant incurs a lower complication rate than 10% (overall US complication rate).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# option 1\nnull_dist_donor |>\n  filter(stat <= obs_stat_donor |> pull(stat)) |>\n  nrow()*2 / 100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# option 2\nnull_dist_donor |>\n  get_p_value(obs_stat = obs_stat_donor, direction = \"two-sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1     0.3\n```\n\n\n:::\n:::\n\n\n## Exercise 5\n\nLet's get real! Redo the test with 15,000 simulations. Note: This can take some time to run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(25)\n\nnull_dist_donor <- organ_donor |>\n  specify(response = outcome, success = \"complication\") |>\n  hypothesize(null = \"point\", p = 0.10) |> \n  generate(reps = 15000, type = \"draw\") |> \n  calculate(stat = \"prop\")\n\nnull_dist_donor |>\n  visualize() +\n  shade_p_value(obs_stat = obs_stat_donor, direction = \"two-sided\")\n```\n\n::: {.cell-output-display}\n![](ae-10-donor-yawner-sa_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnull_dist_donor |>\n  get_p_value(obs_stat = obs_stat_donor, direction = \"two-sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.241\n```\n\n\n:::\n:::\n\n\n# Case study 2: Yawners\n\n## Exercise 6\n\nUsing the `yawn` dataset in the **openintro** package, conduct a hypothesis test for evaluating whether yawning is contagious. First, set the hypotheses. Then, conduct a randomization test using 1000 simulations. Visualize and calculate the p-value and use it to make a conclusion about the statistical discernability of the difference in proportions of yawners in the two groups. Then, comment on whether you \"buy\" this conclusion.\n\n> Null hypothesis: Yawning is not contagious; $p_{trmt} = p_{ctrl}$ Alternative hypothesis: Yawning is contagious; $p_{trmt} > p_{ctrl}$ With a p-value 0.522, which is much larger than the discernability level of 0.05, we fail to reject the null hypothesis. These data do not provide convincing evidence that yawning is contagious. Frankly, I don't buy this statement. I think yawning is contagious. This could be an example of a hypothesis testing error where we fail to reject the null hypothesis when we should have, i.e., a Type II error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(25)\n\nnull_dist_yawner <- yawn |>\n  specify(response = result, explanatory = group, success = \"yawn\") |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in props\", order = c(\"trmt\", \"ctrl\"))\n\nobs_stat_yawner <- yawn |>\n  specify(response = result, explanatory = group, success = \"yawn\") |>\n  calculate(stat = \"diff in props\", order = c(\"trmt\", \"ctrl\"))\n\nnull_dist_yawner |>\n  visualize() +\n  shade_p_value(obs_stat = obs_stat_yawner, direction = \"greater\")\n```\n\n::: {.cell-output-display}\n![](ae-10-donor-yawner-sa_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnull_dist_yawner |>\n  get_p_value(obs_stat = obs_stat_yawner, direction = \"greater\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.522\n```\n\n\n:::\n:::\n",
    "supporting": [
      "ae-10-donor-yawner-sa_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}